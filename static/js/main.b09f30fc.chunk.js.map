{"version":3,"sources":["attachments/img/settings-icon.svg","attachments/img/setting-icon-dark.svg","redux/slices/setting-slice.js","components/ui/setting-icon/setting-icon.js","attachments/img/home-icon.svg","attachments/img/home-icon-dark.svg","components/ui/home-btn/home-btn.js","components/header/header.js","attachments/img/trash-icon.svg","components/ui/trash-btn/trash-btn.js","components/todo-list/todo-item/title/title.js","attachments/img/toggler-close-dark.svg","attachments/img/toggler-close-icon.svg","attachments/img/toggler-icon.svg","components/todo-list/todo-item/toggler-button/toggler-button.js","redux/slices/todo-slice.js","components/todo-list/todo-item/todo-item.js","components/todo-list/todo-list.js","attachments/img/plus-button.svg","attachments/img/plus-button-dark.svg","components/ui/button-add/button-add.js","pages/home/home.js","components/setting-item/switcher-button/switcher-button.js","components/ui/clear-all-btn/clear-all-btn.js","components/setting-item/setting-item.js","pages/settings/settings.js","components/input-add/input-add.js","components/ui/cancel-btn/cancel-btn.js","components/ui/done-btn/done-btn.js","pages/new-task/new-task.js","routing.js","App.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["settingSlice","createSlice","name","initialState","message","count","isThemeChecked","reducers","countPlus","state","countMinus","countInput","action","payload","themeChange","isThemeCheckedSelector","store","setting","actions","settingReducer","reducer","SettingIcon","useSelector","className","to","src","SetIconDark","SetIcon","HomeBtn","ClassName","HomeIconDark","HomeIcon","Header","title","TrashBtn","onHandler","onClick","TrashIcon","Title","text","isToggleStl","isToggle","titleStl","TogglerButton","CloseIcon","CloseIconDark","CloseIconLight","OpenIcon","todoSlice","todoList","isDone","id","taskDone","i","length","addTask","push","removeTask","indexRemove","findIndex","splice","console","error","clearAllTasks","clearAllCompletedTasks","j","todoListSelector","todo","todoReducer","TodoItem","dispatch","useDispatch","changing","onRemove","TodoList","tasks","map","item","index","ButtonAdd","AddIconDark","AddIcon","Home","SwitcherButton","type","onChange","checked","ClearAllBtn","clearAllBtnStl","history","useHistory","SettingItem","settingItemStl","Settings","headerStl","InputAdd","setInputValue","onKeyUp","inputAddStl","onEnterUp","e","keyCode","log","placeholder","autoFocus","event","target","value","CancelBtn","btnStl","DoneBtn","NewTask","onAddNewTask","inputValue","trim","goBack","alert","useState","Routing","path","App","appStl","rootReducer","combineReducers","configureStore","middleware","Root","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.b09f30fc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/settings-icon.d93ae106.svg\";","export default __webpack_public_path__ + \"static/media/setting-icon-dark.c151c730.svg\";","import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\nexport const settingSlice = createSlice({\r\n    name: 'settingSlice',\r\n    initialState: {\r\n        message: 'TEST hello world',\r\n        count: 1,\r\n        isThemeChecked: false,\r\n    },\r\n    reducers: {\r\n        countPlus: (state) => {\r\n            state.count += 1\r\n        },\r\n        countMinus: (state) => {\r\n            state.count -= 1\r\n        },\r\n        countInput: (state, action) => {\r\n            state.count += action.payload.count\r\n        },\r\n\r\n        themeChange: (state) => {\r\n            state.isThemeChecked = !state.isThemeChecked\r\n        }\r\n    }\r\n})\r\n\r\n\r\n/*\r\n* Selectors\r\n* */\r\nexport const messageSelector = (store) => store.setting.message\r\nexport const countSelector = (store) => store.setting.count\r\nexport  const isThemeCheckedSelector = (store) => store.setting.isThemeChecked\r\n\r\n\r\n/*\r\n* Actions\r\n* */\r\nexport const {\r\n    countPlus,\r\n    countMinus,\r\n    countInput,\r\n    themeChange,\r\n} = settingSlice.actions\r\n\r\n\r\n\r\n\r\n/*\r\n* Reducer\r\n* */\r\nexport const settingReducer = settingSlice.reducer","import React from \"react\";\r\nimport './setting-icon.css';\r\nimport SetIcon from '../../../attachments/img/settings-icon.svg';\r\nimport SetIconDark from '../../../attachments/img/setting-icon-dark.svg';\r\nimport {Link} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {isThemeCheckedSelector} from \"../../../redux/slices/setting-slice\";\r\n\r\n\r\n\r\nexport const SettingIcon = () => {\r\n\r\n    const isThemeChecked = useSelector(isThemeCheckedSelector);\r\n\r\n    return (\r\n        <div className={'setting-icon'}>\r\n            <Link className={'link'} to={'/settings'}>\r\n                {isThemeChecked ? <img className={'link-img'} src={SetIconDark}/> : <img className={'link-img'} src={SetIcon} />}\r\n            </Link>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/home-icon.afc47496.svg\";","export default __webpack_public_path__ + \"static/media/home-icon-dark.4ba888ce.svg\";","import React from \"react\";\r\nimport './home-btn.css';\r\nimport HomeIcon from '../../../attachments/img/home-icon.svg';\r\nimport HomeIconDark from '../../../attachments/img/home-icon-dark.svg';\r\nimport {Link} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {isThemeCheckedSelector} from \"../../../redux/slices/setting-slice\";\r\n\r\n\r\nexport const HomeBtn = () => {\r\n\r\n    const isThemeChecked = useSelector(isThemeCheckedSelector)\r\n\r\n    return (\r\n        <div className={'home-btn'}>\r\n            <Link ClassName={'link'} to={'/'}>\r\n                {isThemeChecked ? <img className={'link-img'} src={HomeIconDark}/> : <img className={'link-img'} src={HomeIcon}/>}\r\n            </Link>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './header.css';\r\nimport {SettingIcon} from \"../ui/setting-icon/setting-icon\";\r\nimport {HomeBtn} from \"../ui/home-btn/home-btn\";\r\n\r\nexport const Header = ({title}) => {\r\n\r\n    return (\r\n        <div className={'header '}>\r\n            <h1>{title}</h1>\r\n            {(title) === 'Settings' ? <HomeBtn /> : <SettingIcon />}\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/trash-icon.5c65d17b.svg\";","import React from \"react\";\r\nimport './trash-btn.css';\r\nimport TrashIcon from '../../../attachments/img/trash-icon.svg'\r\n\r\n\r\nexport const TrashBtn = ({onHandler}) => {\r\n    return (\r\n        <div className={'trash-btn'} onClick={onHandler}>\r\n            <img className={'trash-pic'} src={TrashIcon} />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './title.css';\r\nimport {useSelector} from \"react-redux\";\r\nimport {isThemeCheckedSelector} from \"../../../../redux/slices/setting-slice\";\r\n\r\n\r\nexport const Title = ({text, isToggle}) => {\r\n    const isThemeChecked = useSelector(isThemeCheckedSelector)\r\n    const isToggleStl = isToggle ? 'task-is-done' : ''\r\n\r\n    const titleStl = isThemeChecked ? 'dark' : ''\r\n    return (\r\n        <div className={'title ' + titleStl + isToggleStl}>\r\n            {text}\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/toggler-close-dark.0ffef854.svg\";","export default __webpack_public_path__ + \"static/media/toggler-close-icon.67c65523.svg\";","export default __webpack_public_path__ + \"static/media/toggler-icon.f4c2cd4d.svg\";","import React from \"react\";\r\nimport './toggler-button.css';\r\nimport CloseIconDark from '../../../../attachments/img/toggler-close-dark.svg';\r\nimport CloseIconLight from '../../../../attachments/img/toggler-close-icon.svg';\r\nimport OpenIcon from '../../../../attachments/img/toggler-icon.svg';\r\nimport {useSelector} from \"react-redux\";\r\nimport {isThemeCheckedSelector} from \"../../../../redux/slices/setting-slice\";\r\n\r\n\r\nexport const TogglerButton = ({isToggle, onHandler}) => {\r\n\r\n    const isThemeChecked = useSelector(isThemeCheckedSelector);\r\n    const CloseIcon = isThemeChecked ? CloseIconDark : CloseIconLight;\r\n\r\n    return (\r\n        <div\r\n            onClick={onHandler}\r\n            className={'toggler-button'}\r\n        >\r\n            {(isToggle) ? <img src={CloseIcon}/> : <img src={OpenIcon}/>}\r\n        </div>\r\n    )\r\n}","import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const todoSlice = createSlice({\r\n    name: 'todoSlice',\r\n    initialState: {\r\n        todoList: [\r\n            {\r\n                isDone: false,\r\n                title: 'Start making a presentation',\r\n                id: 1\r\n            },\r\n            {\r\n                isDone: false,\r\n                title: 'Tooooo loooong taaaask soooo can’t ignoooore this',\r\n                id: 2\r\n            },\r\n            {\r\n                isDone: false,\r\n                title: 'Task',\r\n                id: 3\r\n            },\r\n            {\r\n                isDone: true,\r\n                title: 'Buy a chocolate for Charlotte',\r\n                id: 4\r\n            },\r\n        ]\r\n    },\r\n    reducers: {\r\n        taskDone: (state, action) => {\r\n            const id = action.payload.id\r\n            // const index = state.todoList.findIndex(i => i.id === action.payload.id)\r\n\r\n            for (let i = 0; i < state.todoList.length; i++){\r\n                if (state.todoList[i].id === id) {\r\n                    state.todoList[i].isDone = !state.todoList[i].isDone\r\n                }\r\n            }\r\n            // console.log('Индекс: ' + index)\r\n            // console.log('todolist id: ' + state.todoList[index].id)\r\n            // console.log('3 console: ' + state.todoList)\r\n        },\r\n        addTask: (state, action) => {\r\n            const title = action.payload.title\r\n\r\n            state.todoList.push({\r\n                isDone: false,\r\n                title: title,\r\n                id: state.todoList.length + 1\r\n            });\r\n        },\r\n\r\n        removeTask: (state, action) => {\r\n            const id = action.payload.id\r\n            const indexRemove = state.todoList.findIndex(i => i.id === id)\r\n\r\n            if (indexRemove === -1) {\r\n                console.error('Ошибка!')\r\n                return\r\n            }\r\n\r\n            state.todoList.splice(indexRemove, 1)\r\n            for (let i = indexRemove; i < state.todoList.length; i++) {\r\n                state.todoList[i].id = state.todoList[i].id -1\r\n            }\r\n        },\r\n\r\n        clearAllTasks: (state, action) => {\r\n            state.todoList.splice(0)\r\n\r\n        },\r\n        clearAllCompletedTasks: (state, action) => {\r\n            for (let i = 0; i < state.todoList.length; i++) {\r\n                if (state.todoList[i].isDone === true) {\r\n                    state.todoList.splice(i, 1)\r\n                    i -= 1\r\n                }\r\n            }\r\n            for (let j = 0; j < state.todoList.length; j++) {\r\n                state.todoList[j].id = j+1\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\n\r\n/*\r\n* Selectors\r\n* */\r\nexport const todoListSelector = (store) => store.todo.todoList\r\n\r\n\r\n/*\r\n* Actions\r\n* */\r\nexport const {\r\n    taskDone,\r\n    addTask,\r\n    removeTask,\r\n    clearAllTasks,\r\n    clearAllCompletedTasks,\r\n} = todoSlice.actions\r\n\r\n\r\n\r\n/*\r\n* Reducer\r\n* */\r\nexport const todoReducer = todoSlice.reducer;\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport './todo-item.css';\r\nimport {TrashBtn} from \"../../ui/trash-btn/trash-btn\";\r\nimport {Title} from \"./title/title\";\r\nimport {TogglerButton} from \"./toggler-button/toggler-button\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeTask, taskDone} from \"../../../redux/slices/todo-slice\";\r\n\r\n\r\nexport const TodoItem = ({text, isToggle, id}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const changing = (id) => {\r\n        const payload = {\r\n            id: id\r\n        }\r\n        dispatch(taskDone(payload))\r\n    }\r\n\r\n    const onRemove = (id) => {\r\n        const payload = {\r\n            id: id\r\n        }\r\n\r\n        dispatch(removeTask(payload))\r\n    }\r\n\r\n    return (\r\n        <div className={'todo-item'}>\r\n            <TogglerButton\r\n                onHandler={() => changing(id)}\r\n                isToggle={isToggle}\r\n            />\r\n            <Title\r\n              text={text}\r\n              isToggle={isToggle}\r\n            />\r\n            <TrashBtn onHandler={() => onRemove(id)}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './todo-list.css';\r\nimport {TodoItem} from \"./todo-item/todo-item\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {todoListSelector} from \"../../redux/slices/todo-slice\";\r\n\r\n\r\nexport const TodoList = () => {\r\n\r\n    const tasks = useSelector(todoListSelector);\r\n\r\n    return (\r\n        <div className={'todo-list'}>\r\n            {\r\n                tasks.map((item, index) => <TodoItem\r\n                    text={item.title}\r\n                    isToggle={item.isDone}\r\n                    id={item.id}/>)\r\n            }\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/plus-button.ca167647.svg\";","export default __webpack_public_path__ + \"static/media/plus-button-dark.6b787867.svg\";","import React from \"react\";\r\nimport './button-add.css';\r\nimport AddIcon from '../../../attachments/img/plus-button.svg';\r\nimport AddIconDark from '../../../attachments/img/plus-button-dark.svg';\r\nimport {Link} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {isThemeCheckedSelector} from \"../../../redux/slices/setting-slice\";\r\n\r\n\r\nexport const ButtonAdd = () => {\r\n\r\n    const isThemeChecked = useSelector(isThemeCheckedSelector);\r\n\r\n    return (\r\n        <div className={'button-add'}>\r\n            <Link ClassName={'link'} to={'/new-task'}>\r\n                <img src={isThemeChecked ? AddIconDark : AddIcon}/>\r\n            </Link>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './home.css';\r\nimport {Header} from \"../../components/header/header\";\r\nimport {TodoList} from \"../../components/todo-list/todo-list\";\r\nimport {ButtonAdd} from \"../../components/ui/button-add/button-add\";\r\n\r\n\r\nexport const Home = () => {\r\n    return (\r\n        <div className={'home'}>\r\n            <div>\r\n                <Header title={'Toduber'}/>\r\n                <TodoList />\r\n            </div>\r\n            <ButtonAdd />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './switcher-button.css';\r\nimport {isThemeCheckedSelector, themeChange} from \"../../../redux/slices/setting-slice\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nexport const SwitcherButton = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const changing = () => {\r\n        dispatch(themeChange())\r\n    }\r\n\r\n    const isThemeChecked = useSelector(isThemeCheckedSelector)\r\n\r\n    return (\r\n        <div className={'switcher-button'}>\r\n            <div className={'switcher'}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    onChange={changing}\r\n                    checked={isThemeChecked}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './clear-all-btn.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {clearAllCompletedTasks, clearAllTasks} from \"../../../redux/slices/todo-slice\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {isThemeCheckedSelector} from \"../../../redux/slices/setting-slice\";\r\n\r\n\r\nexport const ClearAllBtn = ({}) => {\r\n  const isThemeChecked = useSelector(isThemeCheckedSelector);\r\n  const clearAllBtnStl = isThemeChecked ? 'dark-mode-btn' : null;\r\n\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const clearingAll = () => {\r\n    dispatch(clearAllTasks())\r\n\r\n    history.push(\"/\")\r\n  }\r\n  const clearingAllCompleted = () => {\r\n    dispatch(clearAllCompletedTasks())\r\n\r\n    history.push(\"/\")\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={'clear-all-btn'}>\r\n      <div>\r\n        <button\r\n          className={'clear-btn ' + clearAllBtnStl}\r\n          onClick={() => clearingAll()}\r\n        >\r\n          Clear all\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <button\r\n          className={'clear-btn ' + clearAllBtnStl}\r\n          onClick={() => clearingAllCompleted()}\r\n        >\r\n          Clear completed\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport './setting-item.css';\r\nimport {SwitcherButton} from \"./switcher-button/switcher-button\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {isThemeCheckedSelector} from \"../../redux/slices/setting-slice\";\r\nimport {ClearAllBtn} from \"../ui/clear-all-btn/clear-all-btn\";\r\n\r\n\r\nexport const SettingItem = () => {\r\n\r\n    const isThemeChecked = useSelector(isThemeCheckedSelector);\r\n\r\n    const settingItemStl = isThemeChecked ? 'dark-text' : null;\r\n\r\n    return (\r\n      <div className={'setting-item-container'}>\r\n        <div className={'setting-item '}>\r\n          <div className={'setting-item-text ' + settingItemStl}>\r\n            Dark mode\r\n          </div>\r\n          <SwitcherButton />\r\n        </div>\r\n        <div className={'clear-section ' + settingItemStl}>\r\n\r\n            <ClearAllBtn/>\r\n\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport './settings.css';\r\nimport {Header} from \"../../components/header/header\";\r\nimport {SettingItem} from \"../../components/setting-item/setting-item\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {isThemeCheckedSelector} from \"../../redux/slices/setting-slice\";\r\n\r\n\r\nexport const Settings = () => {\r\n  const isThemeChecked = useSelector(isThemeCheckedSelector)\r\n  const headerStl = isThemeChecked ? 'dark' : null\r\n    return (\r\n        <div className={'settings' + headerStl}>\r\n            <Header title={'Settings'}/>\r\n            <SettingItem />\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport './input-add.css';\r\nimport {useSelector} from \"react-redux\";\r\nimport {isThemeCheckedSelector} from \"../../redux/slices/setting-slice\";\r\n\r\n\r\n\r\nexport const InputAdd = ({setInputValue, onKeyUp}) => {\r\n\r\n    const isThemeChecked = useSelector(isThemeCheckedSelector);\r\n    const inputAddStl = isThemeChecked ? 'dark input-dark' : null;\r\n    const onEnterUp = (e) => {\r\n      if (e.keyCode === 13) {\r\n        onKeyUp(e)\r\n        console.log('Enter press');\r\n      }\r\n    }\r\n\r\n    return (\r\n        <div className={'input-add ' + inputAddStl}>\r\n            <input\r\n                className={'input ' + inputAddStl}\r\n                type=\"text\"\r\n                placeholder=\"What do you want to do?\"\r\n                autoFocus\r\n                onChange={event => setInputValue(event.target.value)}\r\n                onKeyUp={(e) => {\r\n                  onEnterUp(e)\r\n                }}\r\n\r\n            />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './cancel-btn.css';\r\nimport {Link} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {isThemeCheckedSelector} from \"../../../redux/slices/setting-slice\";\r\n\r\n\r\nexport const CancelBtn = () => {\r\n\r\n    const isThemeChecked = useSelector(isThemeCheckedSelector);\r\n    const btnStl = isThemeChecked ? 'btn-dark' : null;\r\n\r\n    return (\r\n        <div className={'cancel-btn ' + btnStl}>\r\n            <Link ClassName={'link'} to={'/'}>\r\n                <button className={btnStl}>Cancel</button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './done-btn.css';\r\nimport { useSelector} from \"react-redux\";\r\nimport {isThemeCheckedSelector} from \"../../../redux/slices/setting-slice\";\r\n\r\n\r\n\r\nexport const DoneBtn = ({onClick}) => {\r\n    const isThemeChecked = useSelector(isThemeCheckedSelector);\r\n    const btnStl = isThemeChecked ? 'btn-dark' : null;\r\n\r\n    return (\r\n        <div className={'done-btn'}>\r\n            <button\r\n                className={btnStl}\r\n                onClick={onClick}\r\n            >Done</button>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport './new-task.css';\r\nimport {InputAdd} from \"../../components/input-add/input-add\";\r\nimport {CancelBtn} from \"../../components/ui/cancel-btn/cancel-btn\";\r\nimport {DoneBtn} from \"../../components/ui/done-btn/done-btn\";\r\nimport {TrashBtn} from \"../../components/ui/trash-btn/trash-btn\";\r\nimport {TogglerButton} from \"../../components/todo-list/todo-item/toggler-button/toggler-button\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTask} from \"../../redux/slices/todo-slice\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nexport const NewTask = () => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const addingTask = () => {\r\n        const payload = {\r\n            title: inputValue,\r\n        }\r\n        dispatch(addTask(payload))\r\n    }\r\n\r\n    const onAddNewTask = () => {\r\n        if (inputValue.trim() === '') {\r\n            alert('Title is empty')\r\n            return\r\n        }\r\n        addingTask()\r\n        history.goBack()\r\n    }\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    return (\r\n        <div className={'new-task'}>\r\n            <div className={'new-task-nav'}>\r\n                <Link to={'/'}>\r\n                    <CancelBtn />\r\n                </Link>\r\n                <DoneBtn onClick={onAddNewTask} />\r\n            </div>\r\n            <div className={'new-task-body'}>\r\n                <TogglerButton />\r\n                <InputAdd\r\n                  setInputValue={setInputValue}\r\n                  onKeyUp={onAddNewTask}\r\n                />\r\n                <TrashBtn />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport {Home} from \"./pages/home/home\";\r\nimport {Settings} from \"./pages/settings/settings\";\r\nimport {NewTask} from \"./pages/new-task/new-task\";\r\n\r\n\r\nexport const Routing = () => {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route path=\"/settings\">\r\n                    <Settings />\r\n                </Route>\r\n\r\n                <Route path=\"/new-task\">\r\n                    <NewTask />\r\n                </Route>\r\n\r\n                <Route path=\"/\">\r\n                    <Home />\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}","import './App.css';\nimport React from \"react\";\nimport {Routing} from \"./routing\";\nimport {useSelector} from \"react-redux\";\nimport {isThemeCheckedSelector} from \"./redux/slices/setting-slice\";\n\n\nexport const App = () => {\n                                        // Переключение темы\n    const isThemeChecked = useSelector(isThemeCheckedSelector);\n    const appStl = isThemeChecked ? 'dark' : null;\n                                                 //\n    return (\n      <div className={\"app \" + appStl}>\n          <Routing />\n      </div>\n    )\n}\n\n","import {combineReducers} from \"redux\";\r\nimport {settingReducer} from \"./slices/setting-slice\";\r\nimport {todoReducer} from \"./slices/todo-slice\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    todo: todoReducer,\r\n    setting: settingReducer\r\n})","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport {rootReducer} from \"./root-reducer\";\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: []\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\n\n\nconst Root = () => (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\nReactDOM.render(<Root />, document.querySelector('#root'))"],"sourceRoot":""}